) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive"),
full_width = F,
font_size = 12
)
final_df_20SR_top10 %>%
row_spec(which(final_df_20SR_top10$`SR` < final_df_20SR_top10$`Previous Day SR`),
background = "#FF6666",
color = "light_red",
bold = "T"
) %>% kable(
align = "lccc",
caption = paste("2B. Top 10 Dimension wise more than 20% drop from Previous Day SR on" ,end),
format = "html",
# format.args = list(big.mark = ",", scientific = FALSE),
# col.names = c('Industry', 'Feb', 'March', 'Percentage Diff'),
bold = "T"
) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive"),
full_width = F,
font_size = 12
)
final_df_20SR_top10
final_df_20SR_top10 %>%
row_spec(which(final_df_20SR_top10$`SR` < final_df_20SR_top10$`Previous Day SR`),
background = "#FF6666",
color = "light_red",
bold = "T"
) %>% kable(
align = "lccc",
caption = paste("2B. Top 10 Dimension wise more than 20% drop from Previous Day SR on" ,end),
format = "html",
# format.args = list(big.mark = ",", scientific = FALSE),
# col.names = c('Industry', 'Feb', 'March', 'Percentage Diff'),
bold = "T"
) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive"),
full_width = F,
font_size = 12
)
# overall_merchants %>%
#   knitr::kable( "html", caption = text_spec(paste("2. Top 10 Dimension wise less than 5% SR on" ,end), "html", bold = TRUE), table.attr = "style='width:30%;'") %>%
#   kableExtra::row_spec(0,bold = TRUE) %>%
#   kableExtra::row_spec(which(overall_merchants$`SR` < overall_merchants$`Previous Day SR`), background = "#ffcccb") %>%
#   kable_styling(position = "left")
#
# pp_merchants %>%
#   knitr::kable( "html", caption = text_spec(paste("2A. Top 10 Dimension wise less than 5% SR for Payment Page merchants on" ,end), "html", bold = TRUE)) %>%
#   kableExtra::row_spec(0,bold=TRUE) %>%
#   kableExtra::row_spec(which(pp_merchants$`SR` < pp_merchants$`Previous Day SR`), background = "#ffcccb") %>%
#   kable_styling()
final_df_20SR_top10 %>%
row_spec(which(final_df_20SR_top10$`SR` < final_df_20SR_top10$`Previous Day SR`),
background = "#FF6666",
color = "light_red",
bold = "T"
) %>% kable(
align = "lccc",
caption = paste("2B. Top 10 Dimension wise more than 20% drop from Previous Day SR on" ,end),
format = "html",
# format.args = list(big.mark = ",", scientific = FALSE),
# col.names = c('Industry', 'Feb', 'March', 'Percentage Diff'),
bold = "T"
) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive"),
full_width = F,
font_size = 12
)
final_df_20SR_top10 %>%
row_spec(which(final_df_20SR_top10$`SR` < final_df_20SR_top10$`Previous Day SR`),
background = "#FF6666",
color = "light_red",
bold = "T"
) %>% kable(
align = "lccc",
caption = paste("2B. Top 10 Dimension wise more than 20% drop from Previous Day SR on" ,end),
format = "html",
# format.args = list(big.mark = ",", scientific = FALSE),
# col.names = c('Industry', 'Feb', 'March', 'Percentage Diff'),
bold = "T"
) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive"),
full_width = F,
font_size = 12
)
# overall_merchants %>%
#   knitr::kable( "html", caption = text_spec(paste("2. Top 10 Dimension wise less than 5% SR on" ,end), "html", bold = TRUE), table.attr = "style='width:30%;'") %>%
#   kableExtra::row_spec(0,bold = TRUE) %>%
#   kableExtra::row_spec(which(overall_merchants$`SR` < overall_merchants$`Previous Day SR`), background = "#ffcccb") %>%
#   kable_styling(position = "left")
#
# pp_merchants %>%
#   knitr::kable( "html", caption = text_spec(paste("2A. Top 10 Dimension wise less than 5% SR for Payment Page merchants on" ,end), "html", bold = TRUE)) %>%
#   kableExtra::row_spec(0,bold=TRUE) %>%
#   kableExtra::row_spec(which(pp_merchants$`SR` < pp_merchants$`Previous Day SR`), background = "#ffcccb") %>%
#   kable_styling()
final_df_20SR_top10 %>%
row_spec(which(final_df_20SR_top10$`SR` < final_df_20SR_top10$`Previous Day SR`),
background = "#FF6666",
color = "light_red",
bold = "T"
) %>% kable(
align = "lccc",
caption = paste("2B. Top 10 Dimension wise more than 20% drop from Previous Day SR on" ,end),
format = "html",
# format.args = list(big.mark = ",", scientific = FALSE),
# col.names = c('Industry', 'Feb', 'March', 'Percentage Diff'),
bold = "T"
) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive"),
full_width = F,
font_size = 12
)
# overall_merchants %>%
#   knitr::kable( "html", caption = text_spec(paste("2. Top 10 Dimension wise less than 5% SR on" ,end), "html", bold = TRUE), table.attr = "style='width:30%;'") %>%
#   kableExtra::row_spec(0,bold = TRUE) %>%
#   kableExtra::row_spec(which(overall_merchants$`SR` < overall_merchants$`Previous Day SR`), background = "#ffcccb") %>%
#   kable_styling(position = "left")
#
# pp_merchants %>%
#   knitr::kable( "html", caption = text_spec(paste("2A. Top 10 Dimension wise less than 5% SR for Payment Page merchants on" ,end), "html", bold = TRUE)) %>%
#   kableExtra::row_spec(0,bold=TRUE) %>%
#   kableExtra::row_spec(which(pp_merchants$`SR` < pp_merchants$`Previous Day SR`), background = "#ffcccb") %>%
#   kable_styling()
final_df_20SR_top10 %>%
row_spec(which(final_df_20SR_top10$`SR` < final_df_20SR_top10$`Previous Day SR`),
background = "#FF6666",
color = "light_red",
bold = "T"
) %>% kable(
align = "lccc",
caption = paste("2B. Top 10 Dimension wise more than 20% drop from Previous Day SR on" ,end),
format = "html",
# format.args = list(big.mark = ",", scientific = FALSE),
# col.names = c('Industry', 'Feb', 'March', 'Percentage Diff'),
bold = "T"
) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive"),
full_width = F,
font_size = 12
)
final_df_20SR_top10 %>%
row_spec(which(final_df_20SR_top10$`SR` < final_df_20SR_top10$`Previous Day SR`),
background = "#FF6666",
color = "light_red",
bold = "T"
) %>% kable(
align = "lccc",
caption = paste("2B. Top 10 Dimension wise more than 20% drop from Previous Day SR on" ,end),
format = "html",
# format.args = list(big.mark = ",", scientific = FALSE),
# col.names = c('Industry', 'Feb', 'March', 'Percentage Diff'),
bold = "T"
) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive"),
full_width = F,
font_size = 12
)
final_df_20SR_top10 %>%
row_spec(which(final_df_20SR_top10$`SR` < final_df_20SR_top10$`Previous Day SR`),
background = "#FF6666",
color = "light_red",
bold = "T"
) %>% kable(
align = "lccc",
caption = paste("2B. Top 10 Dimension wise more than 20% drop from Previous Day SR on" ,end),
format = "html",
# format.args = list(big.mark = ",", scientific = FALSE),
# col.names = c('Industry', 'Feb', 'March', 'Percentage Diff'),
bold = "T"
) %>%
kable_styling(
bootstrap_options = c("hover", "condensed", "responsive")  )
q()
while(TRUE) {
if(is.null(prev_fluctuate_end_time))
current_row <- fluctuate_axis[1,] %>% select(mid, pmt, pm, start_time)
else {
current_row <- fluctuate_axis %>%
filter(start_time > prev_fluctuate_end_time[[1]])
if(nrow(current_row) != 0) {
current_row <- current_row %>%
filter(start_time == min(start_time)) %>%
select(mid, pmt, pm, start_time)
} else {
break
}
}
prev_fluctuate_end_time <- up_axis %>% filter(start_time > current_row$start_time, mid == current_row$mid, pmt == current_row$pmt, pm == current_row$pm) %>% summarise(end_time = min(start_time))
current_row <- cbind(current_row,prev_fluctuate_end_time)
down_df <- rbind(down_df, current_row)
down_df <- rbind(down_df, current_row)
down_df_mins <- down_df %>%cbind(difftime =difftime( format(as_datetime(down_df$end_time), '%Y-%m-%d %H:%M:%S'), format(as_datetime(down_df$start_time), '%Y-%m-%d %H:%M:%S'),units = "mins"))
}
up_all <- read_csv("up_all_merchants.csv")
library(readxl)
up_all <- read_csv("up_all_merchants.csv")
up_all <- read_csv("up_all_merchants.csv")
library(csv)
?read_csv
library(tidyverse)
up_all <- read_csv("up_all_merchants.csv")
fluctuate_all <- read_csv("fluctuate_all.csv")
down_all <- read_csv('down_all_merchants.csv')
up_axis <- up_all %>% arrange(start_time,mid,pmt,pm)%>% filter(mid == 'com.swiggy')
fluctuate_axis <- fluctuate_all%>% arrange(start_time,mid,pmt,pm) %>% filter(mid == 'com.swiggy')
down_df <- data.frame(mid = character(0),
pmt = character(0),
pm = character(0),
start_time = character(0),
end_time = character(0))
prev_fluctuate_end_time <- NULL
while(TRUE) {
if(is.null(prev_fluctuate_end_time))
current_row <- fluctuate_axis[1,] %>% select(mid, pmt, pm, start_time)
else {
current_row <- fluctuate_axis %>%
filter(start_time > prev_fluctuate_end_time[[1]])
if(nrow(current_row) != 0) {
current_row <- current_row %>%
filter(start_time == min(start_time)) %>%
select(mid, pmt, pm, start_time)
} else {
break
}
}
prev_fluctuate_end_time <- up_axis %>% filter(start_time > current_row$start_time, mid == current_row$mid, pmt == current_row$pmt, pm == current_row$pm) %>% summarise(end_time = min(start_time))
current_row <- cbind(current_row,prev_fluctuate_end_time)
down_df <- rbind(down_df, current_row)
down_df <- rbind(down_df, current_row)
down_df_mins <- down_df %>%cbind(difftime =difftime( format(as_datetime(down_df$end_time), '%Y-%m-%d %H:%M:%S'), format(as_datetime(down_df$start_time), '%Y-%m-%d %H:%M:%S'),units = "mins"))
}
library(lubridate)
up_all <- read_csv("up_all_merchants.csv")
fluctuate_all <- read_csv("fluctuate_all.csv")
down_all <- read_csv('down_all_merchants.csv')
up_axis <- up_all %>% arrange(start_time,mid,pmt,pm)%>% filter(mid == 'com.swiggy')
fluctuate_axis <- fluctuate_all%>% arrange(start_time,mid,pmt,pm) %>% filter(mid == 'com.swiggy')
down_df <- data.frame(mid = character(0),
pmt = character(0),
pm = character(0),
start_time = character(0),
end_time = character(0))
prev_fluctuate_end_time <- NULL
while(TRUE) {
if(is.null(prev_fluctuate_end_time))
current_row <- fluctuate_axis[1,] %>% select(mid, pmt, pm, start_time)
else {
current_row <- fluctuate_axis %>%
filter(start_time > prev_fluctuate_end_time[[1]])
if(nrow(current_row) != 0) {
current_row <- current_row %>%
filter(start_time == min(start_time)) %>%
select(mid, pmt, pm, start_time)
} else {
break
}
}
prev_fluctuate_end_time <- up_axis %>% filter(start_time > current_row$start_time, mid == current_row$mid, pmt == current_row$pmt, pm == current_row$pm) %>% summarise(end_time = min(start_time))
current_row <- cbind(current_row,prev_fluctuate_end_time)
down_df <- rbind(down_df, current_row)
down_df <- rbind(down_df, current_row)
down_df_mins <- down_df %>%cbind(difftime =difftime( format(as_datetime(down_df$end_time), '%Y-%m-%d %H:%M:%S'), format(as_datetime(down_df$start_time), '%Y-%m-%d %H:%M:%S'),units = "mins"))
}
down_df_mins
setwd("~/Desktop/deployed_mrc/r-apps/merchant_report")
consumer_query <- "select 'case'.'id' as case_id,
'description',
'industry',
'case'.'type' as type,
'case'.'status' as case_status,
product_instance.'status' as product_instance_status,
'case'.'start_time' as case_start_time,
'case'.'end_time' as case_end_time, 'case'.'valid_till' as valid_till, 'provider', 'provider_type', 'requestor' as person_id, 'requestor_type', \n
(case when 'case'.'type' = 'RIDESEARCH' then 'case'.'id'\n
when 'case'.'type' = 'RIDEORDER' then 'case'.'parent_case_id' end) as ride_search_id,\n
(case when 'case'.'type' ='RIDESEARCH' then 'case'.'id' when 'case'.'type'= 'RIDEORDER' then 'case'.'id' end) as ride_order_id,
'case'.'from_location_id' as from_location,
'case'.'to_location_id' as to_location,
'case'.'udf1' as vechicle_variant,
'case'.'udf2' as ride_length_in_kmphr,
'case'.'udf4' as txn_id,
'case'.'udf5' as distance,
'case'.'created_at' as case_created_at,
'case'.'updated_at' as case_updated_at,
product_instance.'created_at' as product_instance_created_at,
product_instance.'updated_at' as product_instance_updated_at,
product_instance.'id' as product_instance_id,
'product_id'
From 'case' left join product_instance on 'case'.id = product_instance.case_id;
"
psql_connection <- function() {
dbConnect(
RPostgres::Postgres() ,
host = Sys.getenv("DB_HOST"),
port = Sys.getenv("DB_PORT"),
dbname = Sys.getenv("DB"),
user = Sys.getenv("DB_USERNAME"),
password =  Sys.getenv("DB_PASSWORD")
)
}
con <- psql_connection()
library(DBI)
consumer_query <- "select 'case'.'id' as case_id,
'description',
'industry',
'case'.'type' as type,
'case'.'status' as case_status,
product_instance.'status' as product_instance_status,
'case'.'start_time' as case_start_time,
'case'.'end_time' as case_end_time, 'case'.'valid_till' as valid_till, 'provider', 'provider_type', 'requestor' as person_id, 'requestor_type', \n
(case when 'case'.'type' = 'RIDESEARCH' then 'case'.'id'\n
when 'case'.'type' = 'RIDEORDER' then 'case'.'parent_case_id' end) as ride_search_id,\n
(case when 'case'.'type' ='RIDESEARCH' then 'case'.'id' when 'case'.'type'= 'RIDEORDER' then 'case'.'id' end) as ride_order_id,
'case'.'from_location_id' as from_location,
'case'.'to_location_id' as to_location,
'case'.'udf1' as vechicle_variant,
'case'.'udf2' as ride_length_in_kmphr,
'case'.'udf4' as txn_id,
'case'.'udf5' as distance,
'case'.'created_at' as case_created_at,
'case'.'updated_at' as case_updated_at,
product_instance.'created_at' as product_instance_created_at,
product_instance.'updated_at' as product_instance_updated_at,
product_instance.'id' as product_instance_id,
'product_id'
From 'case' left join product_instance on 'case'.id = product_instance.case_id;
"
psql_connection <- function() {
dbConnect(
RPostgres::Postgres() ,
host = Sys.getenv("DB_HOST"),
port = Sys.getenv("DB_PORT"),
dbname = Sys.getenv("DB"),
user = Sys.getenv("DB_USERNAME"),
password =  Sys.getenv("DB_PASSWORD")
)
}
con <- psql_connection()
dbGetQuery_ <- function(con, query) {
tryCatch(
{
return(dbGetQuery(con, query))
},
error = function(e) {
data.frame() %>% return()
}
)
}
details <- dbGetQuery_(con, consumer_query)%>% str_interp())
details <- dbGetQuery_(con, consumer_query)%>% str_interp()
consumer_query %>% str_interp()
cat(singlestats_payments_historic <-  "select count(distinct case when status = 'CHARGED' then a.order_id end) as successful_orders,
ROUND(safe_divide(count(distinct case when status='CHARGED' then a.order_id end),count(distinct a.order_id)) *100,2) as osr,
sum( case when status='CHARGED' then a.amount end) as processed_gmv,
ROUND(safe_divide(count(distinct case when b.Txn_count = 'Single Txn' and status = 'CHARGED' then a.order_id end),count(distinct a.order_id)) *100,2) as txn_o_ratio,
round(safe_divide(count(distinct case when a.status = 'CHARGED' and a.txn_conflict = 'CONFLICTED' then a.order_id end),count(distinct a.order_id))*100,2) as txn_conflict,
APPROX_QUANTILES(timestamp_diff(cast(txn_completed as TIMESTAMP), cast(txn_initiated as TIMESTAMP), SECOND), 1001)[OFFSET(991)] as tp90_txn
from
(select order_id, status,amount,txn_conflict,txn_completed,txn_id,txn_initiated
from `express_checkout_v2.express_checkout*`
where _table_suffix between '{bq_previous_start_date_suffix}' AND '{bq_previous_end_date_suffix}'
and {merchant_clause}
and date_created >='{bq_previous_start_date} 18:30'
and  date_created <='{bq_previous_end_date} 18:30'
) as a
left outer join
(
select order_id, count(distinct txn_id) as count, 'Single Txn' as Txn_count,
from `express_checkout_v2.express_checkout*`
where _table_suffix between '{bq_previous_start_date_suffix}' AND '{bq_previous_end_date_suffix}'
and {merchant_clause}
and date_created >='{bq_previous_start_date} 18:30'
and  date_created <='{bq_previous_end_date} 18:30'
group by order_id,Txn_count
having count = 1
) as b
on a.order_id = b.order_id")
singlestats_payments_historic <-  "select count(distinct case when status = 'CHARGED' then a.order_id end) as successful_orders,
ROUND(safe_divide(count(distinct case when status='CHARGED' then a.order_id end),count(distinct a.order_id)) *100,2) as osr,
sum( case when status='CHARGED' then a.amount end) as processed_gmv,
ROUND(safe_divide(count(distinct case when b.Txn_count = 'Single Txn' and status = 'CHARGED' then a.order_id end),count(distinct a.order_id)) *100,2) as txn_o_ratio,
round(safe_divide(count(distinct case when a.status = 'CHARGED' and a.txn_conflict = 'CONFLICTED' then a.order_id end),count(distinct a.order_id))*100,2) as txn_conflict,
APPROX_QUANTILES(timestamp_diff(cast(txn_completed as TIMESTAMP), cast(txn_initiated as TIMESTAMP), SECOND), 1001)[OFFSET(991)] as tp90_txn
from
(select order_id, status,amount,txn_conflict,txn_completed,txn_id,txn_initiated
from `express_checkout_v2.express_checkout*`
where _table_suffix between '{bq_previous_start_date_suffix}' AND '{bq_previous_end_date_suffix}'
and {merchant_clause}
and date_created >='{bq_previous_start_date} 18:30'
and  date_created <='{bq_previous_end_date} 18:30'
) as a
left outer join
(
select order_id, count(distinct txn_id) as count, 'Single Txn' as Txn_count,
from `express_checkout_v2.express_checkout*`
where _table_suffix between '{bq_previous_start_date_suffix}' AND '{bq_previous_end_date_suffix}'
and {merchant_clause}
and date_created >='{bq_previous_start_date} 18:30'
and  date_created <='{bq_previous_end_date} 18:30'
group by order_id,Txn_count
having count = 1
) as b
on a.order_id = b.order_id"
cat(singlestats_payments_historic) %>% glue()
library(glue)
payments_table_historic <- singlestat_data_historic %>% select(successful_orders, osr, txn_o_ratio, txn_conflict, tp90_txn, processed_gmv)
refunds_table_historic <- singlestats_refunds_historic %>% select(count_refunds,refund_sr, pending_refunds, manual_review_refunds, tp90, refund_gmv,refunds_conflicted_ratio)
payments_table_historic$net_gmv <- payments_table_historic$processed_gmv - refunds_table_historic$refund_gmv
print(payments_table_historic)
payments_table_historic <- singlestat_data_historic %>% select(successful_orders, osr, txn_o_ratio, txn_conflict, tp90_txn, processed_gmv)
singlestat_data_historic <- singlestats_payments_historic %>%
glue() %>%
execute_query()
execute_query <- function(query) {
bq_project_query(
project,
query = query,
use_legacy_sql = FALSE,
max_pages = Inf,
location = "asia-south1",
destination_table = NULL,
default_dataset = NULL
) %>% bq_table_download(max_results = Inf, start_index = 0) %>% as_tibble()
}
singlestat_data_historic <- singlestats_payments_historic %>%
glue() %>%
execute_query()
library(bigrquery)
singlestat_data_historic <- singlestats_payments_historic %>%
glue() %>%
execute_query()
library(glue)
library(RCurl)
library(htmltools)
#setting variables for query
# project <- "juspay-sandbox"
project <- "godel-big-q"
#setting time variables for queries
time <- Sys.time()
date <- Sys.Date() - 1
bq_end_date <- lubridate::rollback(Sys.Date())
bq_start_date <- lubridate::rollback(bq_end_date)
bq_start_date_suffix <-
paste0(substr(bq_start_date, 1, 4),
substr(bq_start_date, 6, 7),
substr(bq_start_date, 9, 10))
bq_end_date_suffix <-
paste0(substr(bq_end_date, 1, 4),
substr(bq_end_date, 6, 7),
substr(bq_end_date, 9, 10))
bq_refund_date <- as_datetime(format(date - 5, "%Y-%m-%d 00:00:00"))
bq_previous_start_date <- bq_start_date - 30
bq_previous_end_date <- bq_start_date
bq_previous_start_date_suffix <-
paste0(
substr(bq_start_date - 30, 1, 4),
substr(bq_start_date - 30, 6, 7),
substr(bq_start_date - 30, 9, 10)
)
bq_previous_end_date_suffix <-
paste0(substr(bq_start_date, 1, 4),
substr(bq_start_date, 6, 7),
substr(bq_start_date, 9, 10))
bq_previous_refund_date <-
as_datetime(format(bq_start_date - 5, "%Y-%m-%d 00:00:00"))
current_month <- months(date)
previous_month <- months(date %m+% months(-1))
singlestat_data_historic <- singlestats_payments_historic %>%
glue() %>%
execute_query()
source("data.R",local = knitr::knit_global())
merchant_clause <-
glue(sep = "", "merchant_id in (", merchant_filter_custom, ")")
merchant_filter_custom <- glue(sep = "", "'", merchant_filter, "'")
singlestats_payments_historic <-  "select count(distinct case when status = 'CHARGED' then a.order_id end) as successful_orders,
ROUND(safe_divide(count(distinct case when status='CHARGED' then a.order_id end),count(distinct a.order_id)) *100,2) as osr,
sum( case when status='CHARGED' then a.amount end) as processed_gmv,
ROUND(safe_divide(count(distinct case when b.Txn_count = 'Single Txn' and status = 'CHARGED' then a.order_id end),count(distinct a.order_id)) *100,2) as txn_o_ratio,
round(safe_divide(count(distinct case when a.status = 'CHARGED' and a.txn_conflict = 'CONFLICTED' then a.order_id end),count(distinct a.order_id))*100,2) as txn_conflict,
APPROX_QUANTILES(timestamp_diff(cast(txn_completed as TIMESTAMP), cast(txn_initiated as TIMESTAMP), SECOND), 1001)[OFFSET(991)] as tp90_txn
from
(select order_id, status,amount,txn_conflict,txn_completed,txn_id,txn_initiated
from `express_checkout_v2.express_checkout*`
where _table_suffix between '{bq_previous_start_date_suffix}' AND '{bq_previous_end_date_suffix}'
and merchant_id = 'ixigoprod'
and date_created >='{bq_previous_start_date} 18:30'
and  date_created <='{bq_previous_end_date} 18:30'
) as a
left outer join
(
select order_id, count(distinct txn_id) as count, 'Single Txn' as Txn_count,
from `express_checkout_v2.express_checkout*`
where _table_suffix between '{bq_previous_start_date_suffix}' AND '{bq_previous_end_date_suffix}'
and merchant_id = 'ixigoprod'
and date_created >='{bq_previous_start_date} 18:30'
and  date_created <='{bq_previous_end_date} 18:30'
group by order_id,Txn_count
having count = 1
) as b
on a.order_id = b.order_id"
singlestats_payments_historic <- singlestats_payments_historic %>% glue()%>% execute_query()
singlestats_payments_historic
q()
